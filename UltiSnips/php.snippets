## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

global !p

def php_upcase_first_letter(s):
    if len(s) == 0:
	    return ""
    return s[0].upper() + s[1:]

def php_parse_arguments(argumentsAsString):
    arguments = []
    for argument in argumentsAsString.split(","):
        if len(argument.strip()) == 0:
            continue
        parts = argument.strip().split(" ")
        if len(parts) == 1:
            arguments.append({"type": "", "name": parts[0].strip("$")})
        if len(parts) == 2:
            arguments.append({"type": parts[0], "name": parts[1].strip("$")})
    return arguments

def php_construct_body_from_arguments(argumentsAsString):
    arguments = php_parse_arguments(argumentsAsString)
    if len(arguments) == 0:
        return ""
    body = ""
    for argument in arguments:
        body += "\n        $this->" + argument["name"] + " = $" + argument["name"] + ";"
    return body

def php_properties_from_arguments(argumentsAsString):
    arguments = php_parse_arguments(argumentsAsString)
    if len(arguments) == 0:
        return ""
    body = ""
    for argument in arguments:
        body += "\n    /** @var " + argument["type"] + " */"
        body += "\n    private $" + argument["name"] + ";\n"
    return body

def php_getters_from_arguments(argumentsAsString, includeWithers):
    arguments = php_parse_arguments(argumentsAsString)
    if len(arguments) == 0:
        return ""
    body = ""
    for argument in arguments:
        returnTypeHint = ""
        body += "\n"
        if len(argument["type"]) > 0:
            returnTypeHint = ": " + argument["type"]
        else:
            body += "\n    /**"
            body += "\n     * @return " + argument["type"]
            body += "\n     */"
        body += "\n    public function get" + php_upcase_first_letter(argument["name"]) + "()" + returnTypeHint
        body += "\n    {"
        body += "\n        return $this->" + argument["name"] + ";"
        body += "\n    }"
        if includeWithers:
            body += "\n"
            paramTypeHint = ""
            if len(argument["type"]) > 0:
                paramTypeHint = argument["type"] + " "
            else:
                body += "\n    /**"
                body += "\n     * @param "
                body += "\n     */"
            body += "\n    public function with" + php_upcase_first_letter(argument["name"]) + "(" + paramTypeHint + "$" + argument["name"] + "): self"
            body += "\n    {"
            body += "\n        $cloned = clone $this;"
            body += "\n        $cloned->" + argument["name"] + " = $" + argument["name"] + ";"
            body += "\n        return $cloned;"
            body += "\n    }"
    return body

endglobal

snippet icvo "iController value object"
<?php

namespace `!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`;

/**
 * 
 */
final class `!v expand("%:t:r")`
{`!p snip.rv = php_properties_from_arguments(t[1])`
    public function __construct(${1:arguments})
    {`!p snip.rv = php_construct_body_from_arguments(t[1])`
    }`!p snip.rv = php_getters_from_arguments(t[1], False)`
}
endsnippet

snippet icvowith "iController value object with getters"
<?php

namespace `!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`;

/**
 * 
 */
final class `!v expand("%:t:r")`
{`!p snip.rv = php_properties_from_arguments(t[1])`
    public function __construct(${1:arguments})
    {`!p snip.rv = php_construct_body_from_arguments(t[1])`
    }`!p snip.rv = php_getters_from_arguments(t[1], True)`
}
endsnippet

snippet var "Private var" !b
/** @var $2 */
private $$1;
endsnippet

snippet get "Getter" !b
public function get${1:`!p snip.rv = t[1][0:1].upper() + t[1][1:]`}()
{
    return $this->${1:name};
}
endsnippet

snippet with "Wither" !b
public function with${1:`!p snip.rv = t[1][0:1].upper() + t[1][1:]`}($2 $$1): self
{
    $cloned = clone $this;
    $cloned->$1 = $${1:name};
    return $cloned;
}
endsnippet

snippet getwith "getter & Wither" !bm
public function get${1:`!p snip.rv = t[1][0:1].upper() + t[1][1:]`}(): $2
{
    return $this->$1;
}

public function with${1:`!p snip.rv = t[1][0:1].upper() + t[1][1:]`}($2 $$1): self
{
    $cloned = clone $this;
    $cloned->$1 = $${1:name};
    return $cloned;
}
endsnippet

snippet pub "Public function" !b
public function ${1:name}()
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pri "Private function" !b
private function ${1:name}()
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pubstatfun "Public static function" !b
public static function ${1:name}()
{
}
endsnippet

snippet pristatfun "Private static function" !b
private static function ${1:name}()
{
}
endsnippet

snippet class "class"
<?php

namespace `!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`;

/**
 * 
 */
final class `!v Filename('', 'myClass')`
{
    ${1}
}
endsnippet

snippet icclass "icclass"
<?php

namespace `!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`;

/**
 * 
 */
final class `!v expand("%:t:r")`
{
    ${3}
}
endsnippet

snippet ictest "ictest"
<?php

namespace `!v substitute(substitute(expand("%:p"), '.*ic.platform\/tests\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`;

final class `!v expand("%:t:r")` extends \iController\TestConfiguration\AbstractSymfonyTest
{
    public function ${1:testFunctionality}()
    {
    }
}
endsnippet

snippet icforw "Forward propel relation getter/setter"
public function get${1:NewField}()
{
    return $this->get${2:OldField}();
}

public function set$1($3$`!p snip.rv = t[1][0:1].lower() + t[1][1:]`)
{
    return $this->set$2($`!p snip.rv = t[1][0:1].lower() + t[1][1:]`);
}
endsnippet

snippet constr "Constructor"
public function __construct(${1})
{
}
endsnippet

snippet icforwobj "Forward propel relation getter/setter fot objects"
public function get${1:NewField}()
{
    $`!p snip.rv = t[1][0:1].lower() + t[1][1:]` = $this->get${2:OldField}();
    if(null === $`!p snip.rv = t[1][0:1].lower() + t[1][1:]`) {
        throw new EntityNotFoundException('Could not find `!p snip.rv = t[1][0:1].lower() + t[1][1:]` for $4 with id: ' . $this->getId());
    }
    return $`!p snip.rv = t[1][0:1].lower() + t[1][1:]`;
}

public function set$1($1 $3$`!p snip.rv = t[1][0:1].lower() + t[1][1:]`)
{
    return $this->set$2($`!p snip.rv = t[1][0:1].lower() + t[1][1:]`);
}
endsnippet


snippet ictask "Symfony1 task for iControllah"
<?php

final class ${1:`!v expand("%:t:r:r")`} extends \iController\Platform\Symfony1\Task\BaseTask
{
    protected function configure()
    {
        $this->namespace = '$1';
        $this->name = '$2';
    }

    /**
     * {@inheritdoc}
     */
    protected function execute($arguments = [], $options = [])
    {
    }
}
endsnippet

snippet testfun "phpunit test function"
public function test${1:Functionality}()
{
}
endsnippet

snippet sf "simplefixtures"
$sf = $this->simpleFixtures();
endsnippet

snippet co "container"
$container = $this->getContainer();
endsnippet

# :vim:ft=snippets:
