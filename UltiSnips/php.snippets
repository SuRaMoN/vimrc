## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet array "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "def"
define('${1}'${2});${3}
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});"
endsnippet

snippet doc_f "doc_f"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 **/
${1:public }function ${2:someFunc}(${3})
{${6}
}
endsnippet

snippet doc_i "doc_i"
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 **/
interface ${1:someClass}
{${4}
} // END interface $1"
endsnippet

snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreachk "foreachk"
foreach ($${1:variable} as $${2:key} => $${3:value}){
	${4:// code...}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if"
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet t "t"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" !b
public function get${1/\w+\s*/\u$0/}() 
{
    return $this->$1;$2
}
$4
endsnippet

snippet setter "PHP Class Setter" !b
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;$3
    ${4:return $this;}
}
$0
endsnippet

snippet gs "PHP Class Getter Setter" !b
protected $$1

/*
 * Getter for $1
 */
public function get${1/\w+\s*/\u$0/}() 
{
    return $this->$1;$2
}

/*
 * Setter for $1
 */
public function set${1/\w+\s*/\u$0/}($$1)
{
    $this->$1 = $$1;$3
    ${4:return $this;}
}
$0
endsnippet

snippet pub "Public function" !b
public function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pro "Protected field" !b
protected $$1;
endsnippet

snippet pri "Private function" !b
private function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet statfun "Public static function" !b
${3:public} static function ${1:name}(${2:$param})
{
    ${VISUAL}${4:return null;}
}
$5
endsnippet

snippet profun "Protected function" !b
protected function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pros "Protected static function" !b
protected static function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet pris "Private static function" !b
private static function ${1:name}(${2:$param})
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet fu "Function snip" !b
function ${1:name}(${2:$param}) 
{
    ${VISUAL}${3:return null;}
}
$0
endsnippet

snippet fore "Foreach loop"
foreach ($${1:variable} as $${3:value}){
    ${VISUAL}${4}
}
$0
endsnippet

snippet new "New class instance" !b
$$1 = new $1($2);
$0
endsnippet

snippet ife "if else"
if (${1:/* condition */}) {
    ${2:// code...}
} else {
    ${3:// code...}
}
$0
endsnippet

snippet pr "Dumb debug helper in HTML"
echo '<pre>' . var_export($1, 1) . '</pre>';$0
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);$0
endsnippet

# Symfony 2 based snippets
snippet sfa "Symfony 2 Controller action"
/**
* @Route("/${1:route_name}", name="$1")
* @Template()
*/
public function $1Action($2)
{
    $3
    return ${4:array();}$0
}
endsnippet

snippet fun "fun"
${4:public }function ${1:FunctionName}(${2})
{
	${3}
}
endsnippet

# $... = array (...)
snippet array "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet class "class"
<?php

namespace ${1:`!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`};


class ${2:`!v Filename('', 'myClass')`}
{
	public function __construct()
	{
	}
	${3}
}

endsnippet

snippet ibtest "ibtest"
<?php

namespace ${1:`!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`};

use Ibiller\CoreBundle\Tests\TestCase;


class ${2:`!v Filename('', 'myClass')`} extends TestCase
{
	/** @test */
	public function ${3:testMainFunctionality}()
	{
		${4}
	}
}

endsnippet

snippet icclass "icclass"
<?php

namespace ${1:`!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`};


class ${2:`!v Filename('', 'myClass')`}
{
	public function __construct()
	{
	}
	${3}
}

endsnippet

snippet icexc "icexc"
<?php

namespace ${1:`!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`};

use Exception;


class ${2:`!v Filename('', 'myClass')`} extends Exception
{
}

endsnippet

snippet exc "exc"
<?php

namespace ${1:`!v substitute(substitute(expand("%:p"), '.*\/src\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`};

use Exception;


class ${2:`!v Filename('', 'myClass')`} extends Exception
{
}

endsnippet

snippet ictest "ictest"
<?php

namespace ${3:`!v substitute(substitute(expand("%:p"), '.*ic.platform\/tests\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`};


class ${2:`!v Filename('', 'myClass')`} extends \iController\TestConfiguration\AbstractSymfonyTest
{
	protected $previousErrorReporting;

    public function setup()
    {
		$this->previousErrorReporting = error_reporting(E_ALL);
        $this->deleteFromAllTables();
    }

    public function tearDown()
    {
		error_reporting($this->previousErrorReporting);
	}

	/** @test */
	public function ${1:testFunctionality}()
	{
	}
}

endsnippet

snippet test "test"
<?php

namespace ${1:`!v substitute(substitute(expand("%:p"), '.*\/[tT]ests\/\(.*\)\/.*\.php', '\1', ''), '\/', '\\', 'g')`};

use PHPUnit_Framework_TestCase;


class ${2:`!v Filename('', 'myClass')`} extends PHPUnit_Framework_TestCase
{
	/** @test */
	public function testFunctionality()
	{
	}
}

endsnippet


snippet icdepr "Depricated propel models"
// depricated: use get${1:NewField}
public function get${2:DepricatedField}()
{
	\iController\Platform\Helper\DepricationMailNotifier::notifiyDeprication();
	return $this->get$1();
}

// depricated: use set$1
public function set$2($3$`!p snip.rv = t[1][0:1].lower() + t[1][1:]`)
{
	\iController\Platform\Helper\DepricationMailNotifier::notifiyDeprication();
	return $this->set$1($`!p snip.rv = t[1][0:1].lower() + t[1][1:]`);
}
endsnippet


snippet icforw "Forward propel relation getter/setter"
public function get${1:NewField}()
{
	return $this->get${2:OldField}();
}

public function set$1($3$`!p snip.rv = t[1][0:1].lower() + t[1][1:]`)
{
	return $this->set$2($`!p snip.rv = t[1][0:1].lower() + t[1][1:]`);
}
endsnippet

snippet constr "Constructor"
public function __construct(${1})
{
}
endsnippet

snippet icforwobj "Forward propel relation getter/setter fot objects"
public function get${1:NewField}()
{
	$`!p snip.rv = t[1][0:1].lower() + t[1][1:]` = $this->get${2:OldField}();
	if(null === $`!p snip.rv = t[1][0:1].lower() + t[1][1:]`) {
		throw new EntityNotFoundException('Could not find `!p snip.rv = t[1][0:1].lower() + t[1][1:]` for $4 with id: ' . $this->getId());
	}
	return $`!p snip.rv = t[1][0:1].lower() + t[1][1:]`;
}

public function set$1($1 $3$`!p snip.rv = t[1][0:1].lower() + t[1][1:]`)
{
	return $this->set$2($`!p snip.rv = t[1][0:1].lower() + t[1][1:]`);
}
endsnippet


snippet ictask "Symfony1 task for iControllah"
<?php

class ${1:`!v expand("%:t:r:r")`} extends \iController\Platform\Symfony1\Task\BaseTask
{
    protected function configure()
	{
        $this->addOptions(array(
            new sfCommandOption('connection', null, sfCommandOption::PARAMETER_REQUIRED, 'The connection name', 'propel'),
            new sfCommandOption('env', null, sfCommandOption::PARAMETER_REQUIRED, 'The environment', 'prod'),
        ));

        $this->namespace = '';
        $this->name = '';
        $this->briefDescription = '';
        $this->detailedDescription = '';
    }

    protected function execute($arguments = array(), $options = array())
    {
		$this->initDatabase($options);
    }
}

endsnippet

snippet testfun "phpunit test function"
/** @test */
public function test${1:Functionality}()
{
}
endsnippet

# :vim:ft=snippets:

